export const findSocialLoginByKey = async (db, key) => {
 let res;
 try {
  let v1Join = ' INNER JOIN oauth_v1_config_params CP ON CP.social_login_key = SL.social_login_key';
  let v2Join = ' INNER JOIN oauth_v2_config_params CP ON CP.social_login_key = SL.social_login_key';

  let selectClause = 'SELECT SL.*, CP.* FROM social_logins SL';
  let whereClause = ' WHERE SL.social_login_key = $1';

  let v1 = await db.query(selectClause + v1Join + whereClause, [key]);
  let v2 = await db.query(selectClause + v2Join + whereClause, [key]);

  res = {
   v1Config: (v1.rowCount > 0 ? v1.rows[0] : null),
   v2Config: (v2.rowCount > 0 ? v2.rows[0] : null)
  };
 } catch (error) {
  console.error(error);
  throw error;
 }
 return res;
}

export const findMappingDataByExternalUserId = async (db, key, userId) => {
 let res;
 try {
  res = await db.query('SELECT users.username, users.role FROM social_login_mappings LEFT JOIN users ON users.username = social_login_mappings.username WHERE social_login_key LIKE $1 and external_user_id LIKE $2', [key, userId]);
 } catch (error) {
  console.error(error);
  throw error;
 }

 return res.rows[0];
}

export const insertSocialLoginMapping = async (db, social_login_key, external_user_id, external_username, external_user_email, autoGeneratedUserName) => {
 try {
  await db.query('INSERT INTO social_login_mappings(social_login_key, external_user_id, external_username, external_user_email, username) VALUES($1, $2, $3, $4, $5)',
   [social_login_key, external_user_id, external_username, external_user_email, autoGeneratedUserName]);
 } catch (error) {
  console.error(error);
  throw error;
 }
}
